{"version":3,"sources":["providers.js"],"names":[],"mappings":"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","file":"providers.js","sourcesContent":["import {SuperConstructor as SuperConstructorAnnotation, readAnnotations} from './annotations';\nimport {isClass, isFunction, isObject, toString} from './util';\n\n\n// Provider is responsible for creating instances.\n//\n// responsibilities:\n// - create instances\n//\n// communication:\n// - exposes `create()` which creates an instance of something\n// - exposes `params` (information about which arguments it requires to be passed into `create()`)\n//\n// Injector reads `provider.params` first, create these dependencies (however it wants),\n// then calls `provider.create(args)`, passing in these arguments.\n\n\nvar EmptyFunction = Object.getPrototypeOf(Function);\n\n\n// ClassProvider knows how to instantiate classes.\n//\n// If a class inherits (has parent constructors), this provider normalizes all the dependencies\n// into a single flat array first, so that the injector does not need to worry about inheritance.\n//\n// - all the state is immutable (constructed)\n//\n// TODO(vojta): super constructor - should be only allowed during the constructor call?\nclass ClassProvider {\n  constructor(clazz, params, isPromise) {\n    // TODO(vojta): can we hide this.provider? (only used for hasAnnotation(provider.provider))\n    this.provider = clazz;\n    this.isPromise = isPromise;\n\n    this.params = [];\n    this._constructors = [];\n\n    this._flattenParams(clazz, params);\n    this._constructors.unshift([clazz, 0, this.params.length - 1]);\n  }\n\n  // Normalize params for all the constructors (in the case of inheritance),\n  // into a single flat array of DependencyDescriptors.\n  // So that the injector does not have to worry about inheritance.\n  //\n  // This function mutates `this.params` and `this._constructors`,\n  // but it is only called during the constructor.\n  // TODO(vojta): remove the annotations argument?\n  _flattenParams(constructor, params) {\n    var SuperConstructor;\n    var constructorInfo;\n\n    for (var param of params) {\n      if (param.token === SuperConstructorAnnotation) {\n        SuperConstructor = Object.getPrototypeOf(constructor);\n\n        if (SuperConstructor === EmptyFunction) {\n          throw new Error(`${toString(constructor)} does not have a parent constructor. Only classes with a parent can ask for SuperConstructor!`);\n        }\n\n        constructorInfo = [SuperConstructor, this.params.length];\n        this._constructors.push(constructorInfo);\n        this._flattenParams(SuperConstructor, readAnnotations(SuperConstructor).params);\n        constructorInfo.push(this.params.length - 1);\n      } else {\n        this.params.push(param);\n      }\n    }\n  }\n\n  // Basically the reverse process to `this._flattenParams`:\n  // We get arguments for all the constructors as a single flat array.\n  // This method generates pre-bound \"superConstructor\" wrapper with correctly passing arguments.\n  _createConstructor(currentConstructorIdx, context, allArguments) {\n    var constructorInfo = this._constructors[currentConstructorIdx];\n    var nextConstructorInfo = this._constructors[currentConstructorIdx + 1];\n    var argsForCurrentConstructor;\n\n    if (nextConstructorInfo) {\n      argsForCurrentConstructor = allArguments\n          .slice(constructorInfo[1], nextConstructorInfo[1])\n          .concat([this._createConstructor(currentConstructorIdx + 1, context, allArguments)])\n          .concat(allArguments.slice(nextConstructorInfo[2] + 1, constructorInfo[2] + 1));\n    } else {\n      argsForCurrentConstructor = allArguments.slice(constructorInfo[1], constructorInfo[2] + 1);\n    }\n\n    return function InjectedAndBoundSuperConstructor() {\n      // TODO(vojta): throw if arguments given\n      return constructorInfo[0].apply(context, argsForCurrentConstructor);\n    };\n  }\n\n  // It is called by injector to create an instance.\n  create(args) {\n    var context = Object.create(this.provider.prototype);\n    var constructor = this._createConstructor(0, context, args);\n    var returnedValue = constructor();\n\n    if (isFunction(returnedValue) || isObject(returnedValue)) {\n      return returnedValue;\n    }\n\n    return context;\n  }\n}\n\n\n// FactoryProvider knows how to create instance from a factory function.\n// - all the state is immutable\nclass FactoryProvider {\n  constructor(factoryFunction, params, isPromise) {\n    this.provider = factoryFunction;\n    this.params = params;\n    this.isPromise = isPromise;\n\n    for (var param of params) {\n      if (param.token === SuperConstructorAnnotation) {\n        throw new Error(`${toString(factoryFunction)} is not a class. Only classes with a parent can ask for SuperConstructor!`);\n      }\n    }\n  }\n\n  create(args) {\n    return this.provider.apply(undefined, args);\n  }\n}\n\n\nexport function createProviderFromFnOrClass(fnOrClass, annotations) {\n  if (isClass(fnOrClass)) {\n    return new ClassProvider(fnOrClass, annotations.params, annotations.provide.isPromise);\n  }\n\n  return new FactoryProvider(fnOrClass, annotations.params, annotations.provide.isPromise);\n}\n"],"sourceRoot":"/source/"}