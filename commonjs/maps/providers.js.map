{"version":3,"sources":["providers.js"],"names":[],"mappings":"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","file":"providers.js","sourcesContent":["import {SuperConstructor as SuperConstructorAnnotation, readAnnotations, hasAnnotation, Factory, Type} from './annotations'\nimport {isFunction, isObject, toString} from './util'\n\n\n// Provider is responsible for creating instances.\n//\n// responsibilities:\n// - create instances\n//\n// communication:\n// - exposes `create()` which creates an instance of something\n// - exposes `params` (information about which arguments it requires to be passed into `create()`)\n//\n// Injector reads `provider.params` first, create these dependencies (however it wants),\n// then calls `provider.create(args)`, passing in these arguments.\n\n\nvar EmptyFunction = Object.getPrototypeOf(Function)\n\n\n// ClassProvider knows how to instantiate classes.\n//\n// If a class inherits (has parent constructors), this provider normalizes all the dependencies\n// into a single flat array first, so that the injector does not need to worry about inheritance.\n//\n// - all the state is immutable (constructed)\n//\n// TODO(vojta): super constructor - should be only allowed during the constructor call?\nclass ClassProvider {\n  constructor(clazz, params, isPromise) {\n    // TODO(vojta): can we hide this.provider? (only used for hasAnnotation(provider.provider))\n    this.provider = clazz\n    this.isPromise = isPromise\n\n    this.params = []\n    this._constructors = []\n\n    this._flattenParams(clazz, params)\n    this._constructors.unshift([clazz, 0, this.params.length - 1])\n  }\n\n  // Normalize params for all the constructors (in the case of inheritance),\n  // into a single flat array of DependencyDescriptors.\n  // So that the injector does not have to worry about inheritance.\n  //\n  // This function mutates `this.params` and `this._constructors`,\n  // but it is only called during the constructor.\n  // TODO(vojta): remove the annotations argument?\n  _flattenParams(constructor, params) {\n    var SuperConstructor\n    var constructorInfo\n\n    for (var param of params) {\n      if (param.token === SuperConstructorAnnotation) {\n        SuperConstructor = Object.getPrototypeOf(constructor)\n\n        if (SuperConstructor === EmptyFunction) {\n          throw new Error(`${toString(constructor)} does not have a parent constructor. Only classes with a parent can ask for SuperConstructor!`)\n        }\n\n        constructorInfo = [SuperConstructor, this.params.length]\n        this._constructors.push(constructorInfo)\n        this._flattenParams(SuperConstructor, readAnnotations(SuperConstructor).params)\n        constructorInfo.push(this.params.length - 1)\n      } else {\n        this.params.push(param)\n      }\n    }\n  }\n\n  // Basically the reverse process to `this._flattenParams`:\n  // We get arguments for all the constructors as a single flat array.\n  // This method generates pre-bound \"superConstructor\" wrapper with correctly passing arguments.\n  _createConstructor(currentConstructorIdx, context, allArguments) {\n    var constructorInfo = this._constructors[currentConstructorIdx]\n    var nextConstructorInfo = this._constructors[currentConstructorIdx + 1]\n    var argsForCurrentConstructor\n\n    if (nextConstructorInfo) {\n      argsForCurrentConstructor = allArguments\n          .slice(constructorInfo[1], nextConstructorInfo[1])\n          .concat([this._createConstructor(currentConstructorIdx + 1, context, allArguments)])\n          .concat(allArguments.slice(nextConstructorInfo[2] + 1, constructorInfo[2] + 1))\n    } else {\n      argsForCurrentConstructor = allArguments.slice(constructorInfo[1], constructorInfo[2] + 1)\n    }\n\n    return function InjectedAndBoundSuperConstructor() {\n      // TODO(vojta): throw if arguments given\n      return constructorInfo[0].apply(context, argsForCurrentConstructor)\n    }\n  }\n\n  // It is called by injector to create an instance.\n  create(args) {\n    var context = Object.create(this.provider.prototype)\n    var constructor = this._createConstructor(0, context, args)\n    var returnedValue = constructor()\n\n    if (isFunction(returnedValue) || isObject(returnedValue)) {\n      return returnedValue\n    }\n\n    return context\n  }\n}\n\n\n// FactoryProvider knows how to create instance from a factory function.\n// - all the state is immutable\nclass FactoryProvider {\n  constructor(factoryFunction, params, isPromise) {\n    this.provider = factoryFunction\n    this.params = params\n    this.isPromise = isPromise\n\n    for (var param of params) {\n      if (param.token === SuperConstructorAnnotation) {\n        throw new Error(`${toString(factoryFunction)} is not a class. Only classes with a parent can ask for SuperConstructor!`)\n      }\n    }\n  }\n\n  create(args) {\n    return this.provider.apply(undefined, args)\n  }\n}\n\n\nexport function createProviderFromFnOrClass(ClassOrFactory, annotations) {\n\n  if (hasAnnotation(ClassOrFactory, Factory)) {\n    return new FactoryProvider(ClassOrFactory, annotations.params, annotations.provide.isPromise)\n  }\n\n  if (hasAnnotation(ClassOrFactory, Type)) {\n    return new ClassProvider(ClassOrFactory, annotations.params, annotations.provide.isPromise)\n  }\n\n  return new FactoryProvider(ClassOrFactory, annotations.params, annotations.provide.isPromise)\n}\n"],"sourceRoot":"/source/"}