{"version":3,"sources":["profiler.js"],"names":[],"mappings":"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","file":"profiler.js","sourcesContent":["/*jshint -W069 */\n\nimport {toString} from './util';\n\n\nvar IS_DEBUG = false;\nvar _global = null;\n\nif (typeof process === 'object' && process.env) {\n  // Node.js\n  IS_DEBUG = !!process.env['DEBUG'];\n  _global = global;\n} else if (typeof location === 'object' && location.search) {\n  // Browser\n  IS_DEBUG = /di_debug/.test(location.search);\n  _global = window;\n}\n\n\nvar globalCounter = 0;\nfunction getUniqueId() {\n  return ++globalCounter;\n}\n\n\nfunction serializeToken(token, tokens) {\n  if (!tokens.has(token)) {\n    tokens.set(token, getUniqueId().toString());\n  }\n\n  return tokens.get(token);\n}\n\nfunction serializeProvider(provider, key, tokens) {\n  return {\n    id: serializeToken(key, tokens),\n    name: toString(key),\n    isPromise: provider.isPromise,\n    dependencies: provider.params.map(function(param) {\n      return {\n        token: serializeToken(param.token, tokens),\n        isPromise: param.isPromise,\n        isLazy: param.isLazy\n      };\n    })\n  };\n}\n\n\nfunction serializeInjector(injector, tokens, Injector) {\n  var serializedInjector = {\n    id: serializeToken(injector, tokens),\n    parent_id: injector._parent ? serializeToken(injector._parent, tokens) : null,\n    providers: {}\n  };\n\n  var injectorClassId = serializeToken(Injector, tokens);\n  serializedInjector.providers[injectorClassId] = {\n    id: injectorClassId,\n    name: toString(Injector),\n    isPromise: false,\n    dependencies: []\n  };\n\n  injector._providers.forEach(function(provider, key) {\n    var serializedProvider = serializeProvider(provider, key, tokens);\n    serializedInjector.providers[serializedProvider.id] = serializedProvider;\n  });\n\n  return serializedInjector;\n}\n\n\nexport function profileInjector(injector, Injector) {\n  if (!IS_DEBUG) {\n    return;\n  }\n\n  if (!_global.__di_dump__) {\n    _global.__di_dump__ = {\n      injectors: [],\n      tokens: new Map()\n    };\n  }\n\n  _global.__di_dump__.injectors.push(serializeInjector(injector, _global.__di_dump__.tokens, Injector));\n}\n"],"sourceRoot":"/source/"}