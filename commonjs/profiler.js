"use strict";

exports.profileInjector = profileInjector;
var toString = require('./util').toString;



var IS_DEBUG = false;
var _global = null;

if (typeof process === "object" && process.env) {
  // Node.js
  IS_DEBUG = !!process.env.DEBUG;
  _global = global;
} else if (typeof location === "object" && location.search) {
  // Browser
  IS_DEBUG = /di_debug/.test(location.search);
  _global = window;
}


var globalCounter = 0;
function getUniqueId() {
  return ++globalCounter;
}


function serializeToken(token, tokens) {
  if (!tokens.has(token)) {
    tokens.set(token, getUniqueId().toString());
  }

  return tokens.get(token);
}

function serializeProvider(provider, key, tokens) {
  return {
    id: serializeToken(key, tokens),
    name: toString(key),
    isPromise: provider.isPromise,
    dependencies: provider.params.map(function (param) {
      return {
        token: serializeToken(param.token, tokens),
        isPromise: param.isPromise,
        isLazy: param.isLazy
      };
    })
  };
}


function serializeInjector(injector, tokens, Injector) {
  var serializedInjector = {
    id: serializeToken(injector, tokens),
    parent_id: injector._parent ? serializeToken(injector._parent, tokens) : null,
    providers: {}
  };

  var injectorClassId = serializeToken(Injector, tokens);
  serializedInjector.providers[injectorClassId] = {
    id: injectorClassId,
    name: toString(Injector),
    isPromise: false,
    dependencies: []
  };

  injector._providers.forEach(function (provider, key) {
    var serializedProvider = serializeProvider(provider, key, tokens);
    serializedInjector.providers[serializedProvider.id] = serializedProvider;
  });

  return serializedInjector;
}


function profileInjector(injector, Injector) {
  if (!IS_DEBUG) {
    return;
  }

  if (!_global.__di_dump__) {
    _global.__di_dump__ = {
      injectors: [],
      tokens: new Map()
    };
  }

  _global.__di_dump__.injectors.push(serializeInjector(injector, _global.__di_dump__.tokens, Injector));
}
//# sourceMappingURL=data:application/json;base64,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Q0FBQyxHQUFHLGtCQUFrQixDQUFDO0dBQzFFLENBQUMsQ0FBQzs7QUFFSCxTQUFPLGtCQUFrQixDQUFDO0NBQzNCOzs7QUFHTSxTQUFTLGVBQWUsQ0FBQyxRQUFRLEVBQUUsUUFBUSxFQUFFO0FBQ2xELE1BQUksQ0FBQyxRQUFRLEVBQUU7QUFDYixXQUFPO0dBQ1I7O0FBRUQsTUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUU7QUFDeEIsV0FBTyxDQUFDLFdBQVcsR0FBRztBQUNwQixlQUFTLEVBQUUsRUFBRTtBQUNiLFlBQU0sRUFBRSxJQUFJLEdBQUcsRUFBRTtLQUNsQixDQUFDO0dBQ0g7O0FBRUQsU0FBTyxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDO0NBQ3ZHIiwiZmlsZSI6InByb2ZpbGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHt0b1N0cmluZ30gZnJvbSAnLi91dGlsJztcblxuXG52YXIgSVNfREVCVUcgPSBmYWxzZTtcbnZhciBfZ2xvYmFsID0gbnVsbDtcblxuaWYgKHR5cGVvZiBwcm9jZXNzID09PSAnb2JqZWN0JyAmJiBwcm9jZXNzLmVudikge1xuICAvLyBOb2RlLmpzXG4gIElTX0RFQlVHID0gISFwcm9jZXNzLmVudlsnREVCVUcnXTtcbiAgX2dsb2JhbCA9IGdsb2JhbDtcbn0gZWxzZSBpZiAodHlwZW9mIGxvY2F0aW9uID09PSAnb2JqZWN0JyAmJiBsb2NhdGlvbi5zZWFyY2gpIHtcbiAgLy8gQnJvd3NlclxuICBJU19ERUJVRyA9IC9kaV9kZWJ1Zy8udGVzdChsb2NhdGlvbi5zZWFyY2gpO1xuICBfZ2xvYmFsID0gd2luZG93O1xufVxuXG5cbnZhciBnbG9iYWxDb3VudGVyID0gMDtcbmZ1bmN0aW9uIGdldFVuaXF1ZUlkKCkge1xuICByZXR1cm4gKytnbG9iYWxDb3VudGVyO1xufVxuXG5cbmZ1bmN0aW9uIHNlcmlhbGl6ZVRva2VuKHRva2VuLCB0b2tlbnMpIHtcbiAgaWYgKCF0b2tlbnMuaGFzKHRva2VuKSkge1xuICAgIHRva2Vucy5zZXQodG9rZW4sIGdldFVuaXF1ZUlkKCkudG9TdHJpbmcoKSk7XG4gIH1cblxuICByZXR1cm4gdG9rZW5zLmdldCh0b2tlbik7XG59XG5cbmZ1bmN0aW9uIHNlcmlhbGl6ZVByb3ZpZGVyKHByb3ZpZGVyLCBrZXksIHRva2Vucykge1xuICByZXR1cm4ge1xuICAgIGlkOiBzZXJpYWxpemVUb2tlbihrZXksIHRva2VucyksXG4gICAgbmFtZTogdG9TdHJpbmcoa2V5KSxcbiAgICBpc1Byb21pc2U6IHByb3ZpZGVyLmlzUHJvbWlzZSxcbiAgICBkZXBlbmRlbmNpZXM6IHByb3ZpZGVyLnBhcmFtcy5tYXAoZnVuY3Rpb24ocGFyYW0pIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHRva2VuOiBzZXJpYWxpemVUb2tlbihwYXJhbS50b2tlbiwgdG9rZW5zKSxcbiAgICAgICAgaXNQcm9taXNlOiBwYXJhbS5pc1Byb21pc2UsXG4gICAgICAgIGlzTGF6eTogcGFyYW0uaXNMYXp5XG4gICAgICB9O1xuICAgIH0pXG4gIH07XG59XG5cblxuZnVuY3Rpb24gc2VyaWFsaXplSW5qZWN0b3IoaW5qZWN0b3IsIHRva2VucywgSW5qZWN0b3IpIHtcbiAgdmFyIHNlcmlhbGl6ZWRJbmplY3RvciA9IHtcbiAgICBpZDogc2VyaWFsaXplVG9rZW4oaW5qZWN0b3IsIHRva2VucyksXG4gICAgcGFyZW50X2lkOiBpbmplY3Rvci5fcGFyZW50ID8gc2VyaWFsaXplVG9rZW4oaW5qZWN0b3IuX3BhcmVudCwgdG9rZW5zKSA6IG51bGwsXG4gICAgcHJvdmlkZXJzOiB7fVxuICB9O1xuXG4gIHZhciBpbmplY3RvckNsYXNzSWQgPSBzZXJpYWxpemVUb2tlbihJbmplY3RvciwgdG9rZW5zKTtcbiAgc2VyaWFsaXplZEluamVjdG9yLnByb3ZpZGVyc1tpbmplY3RvckNsYXNzSWRdID0ge1xuICAgIGlkOiBpbmplY3RvckNsYXNzSWQsXG4gICAgbmFtZTogdG9TdHJpbmcoSW5qZWN0b3IpLFxuICAgIGlzUHJvbWlzZTogZmFsc2UsXG4gICAgZGVwZW5kZW5jaWVzOiBbXVxuICB9O1xuXG4gIGluamVjdG9yLl9wcm92aWRlcnMuZm9yRWFjaChmdW5jdGlvbihwcm92aWRlciwga2V5KSB7XG4gICAgdmFyIHNlcmlhbGl6ZWRQcm92aWRlciA9IHNlcmlhbGl6ZVByb3ZpZGVyKHByb3ZpZGVyLCBrZXksIHRva2Vucyk7XG4gICAgc2VyaWFsaXplZEluamVjdG9yLnByb3ZpZGVyc1tzZXJpYWxpemVkUHJvdmlkZXIuaWRdID0gc2VyaWFsaXplZFByb3ZpZGVyO1xuICB9KTtcblxuICByZXR1cm4gc2VyaWFsaXplZEluamVjdG9yO1xufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBwcm9maWxlSW5qZWN0b3IoaW5qZWN0b3IsIEluamVjdG9yKSB7XG4gIGlmICghSVNfREVCVUcpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoIV9nbG9iYWwuX19kaV9kdW1wX18pIHtcbiAgICBfZ2xvYmFsLl9fZGlfZHVtcF9fID0ge1xuICAgICAgaW5qZWN0b3JzOiBbXSxcbiAgICAgIHRva2VuczogbmV3IE1hcCgpXG4gICAgfTtcbiAgfVxuXG4gIF9nbG9iYWwuX19kaV9kdW1wX18uaW5qZWN0b3JzLnB1c2goc2VyaWFsaXplSW5qZWN0b3IoaW5qZWN0b3IsIF9nbG9iYWwuX19kaV9kdW1wX18udG9rZW5zLCBJbmplY3RvcikpO1xufVxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9